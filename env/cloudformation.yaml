AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    AllowedPattern: "^(\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])"
    Description: VPC CIDR (X.X.0.0/16)
    Type: String
    Default: 10.250
  InstanceTypeWeb:
    Type: String
    Description: ApplicationServer EC2 instance type
    Default: t2.large
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge


Mappings:
    RegionAMIMap:
        us-east-1:
            CentOS: ami-ae7bfdb8

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join
         - ''
         - - !Ref VPCCIDR
           - '.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: demo-microservices
  myInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: demo-microservices-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId:
            Ref: myVPC
        Tags:
            - Key: Name
              Value: RT-DEMO-MICROSERVICES-PUBLIC
  publicRoute:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
            Ref: publicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
            Ref: myInternetGateway
  publicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
        AvailabilityZone:
            Fn::Select:
                - 0
                - Fn::GetAZs: ""
        CidrBlock: !Join
            - ''
            - - !Ref VPCCIDR
              - '.3.0/27'
        MapPublicIpOnLaunch: true
        Tags:
            - Key: Name
              Value: SUB-DEMO-MICROSERVICES-PUBLIC-A
        VpcId:
            Ref: myVPC
  publicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        SubnetId:
            Ref: publicSubnetA
        RouteTableId:
            Ref: publicRouteTable


  webServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: WebServer security group
        VpcId: !Ref myVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 9000
            ToPort: 9000
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
  webServerInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap
          - RegionAMIMap
          - !Ref 'AWS::Region'
          - CentOS
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceTypeWeb
      SubnetId:
          Ref: publicSubnetA
      Tags:
          - Key: Name
            Value: DEMO-MICROSERVICES-WEB-SERVER
      SecurityGroupIds:
          - !Ref webServerSecurityGroup
      IamInstanceProfile: !Ref microservicesIntanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          yum install -y epel-release
          yum -y update
          yum -y install python-pip
          pip install pip --upgrade
          pip install awscli

          # Install Python add-ons:
          pip install pystache
          pip install argparse
          pip install python-daemon
          pip install requests

          # Install CFN-BootStrap from source
          curl -sSL https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C /opt
          cd /opt/aws-cfn-bootstrap-1.4/
          python setup.py build
          python setup.py install
          # Configure CFN
          ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
          chmod 775 /usr/init/redhat/cfn-hup
          cd /opt
          mkdir aws
          cd aws
          mkdir bin
          ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup

          # Install docker
          yum install -y yum-utils device-mapper-persistent-data lvm2
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          rpm --import https://download.docker.com/linux/centos/gpg
          yum makecache fast
          yum install -y docker-ce
          systemctl enable docker
          systemctl start docker
          usermod -aG docker centos

  productServiceApp:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: product-service-app
#      RepositoryPolicyText:
#        Version: 2008-10-17
#        Statement:
#            - Sid: CodeBuildAccess
#              Effect: Allow
#              Principal:
#                  Service: codebuild.amazonaws.com
#              Action:
#              - 'ecr:GetDownloadUrlForLayer'
#              - 'ecr:BatchGetImage'
#              - 'ecr:BatchCheckLayerAvailability'
  basketServiceApp:
      Type: 'AWS::ECR::Repository'
      Properties:
        RepositoryName: basket-service-app
#        RepositoryPolicyText:
#          Version: 2008-10-17
#          Statement:
#              - Sid: CodeBuildAccess
#                Effect: Allow
#                Principal:
#                    Service: codebuild.amazonaws.com
#                Action:
#                - 'ecr:GetDownloadUrlForLayer'
#                - 'ecr:BatchGetImage'
#                - 'ecr:BatchCheckLayerAvailability'
  storeServiceApp:
        Type: 'AWS::ECR::Repository'
        Properties:
          RepositoryName: store-service-app
#          RepositoryPolicyText:
#            Version: 2008-10-17
#            Statement:
#                - Sid: CodeBuildAccess
#                  Effect: Allow
#                  Principal:
#                      Service: codebuild.amazonaws.com
#                  Action:
#                  - 'ecr:GetDownloadUrlForLayer'
#                  - 'ecr:BatchGetImage'
#                  - 'ecr:BatchCheckLayerAvailability'
  codeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        Fn::Sub: CodeBuildRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource:
                  - "*"
  codeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:
        Fn::Sub: CodeDeployRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  codePipelineRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName:
          Fn::Sub: CodePipelineRole-${AWS::StackName}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "codepipeline.amazonaws.com"
              Action:
                - "sts:AssumeRole"
  microservicesRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: microservices-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  microservicesIntanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        InstanceProfileName: microservices-role
        Roles:
          - !Ref microservicesRole
  ecrManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Roles:
        - !Ref microservicesRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:DescribeRepositories'
              - 'ecr:ListImages'
              - 'ecr:DescribeImages'
              - 'ecr:BatchGetImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:PutImage'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:ecr:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':repository/'
                  - !Ref productServiceApp
              - !Join
                - ''
                - - 'arn:aws:ecr:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':repository/'
                  - !Ref basketServiceApp
              - !Join
                - ''
                - - 'arn:aws:ecr:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':repository/'
                  - !Ref storeServiceApp



Outputs:
    webServerDNS:
      Value: !GetAtt webServerInstance.PublicDnsName
      Description: WebServer Public DNS